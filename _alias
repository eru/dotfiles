# ls
alias la='ls -lah'
alias ll='ls -lh'

# rm, mv, cp する時は確認する
alias rm='rm -i'
if (mv --help 2>&1 | grep '\--progress-bar' > /dev/null 2>&1;); then
  alias mv='mv -ig'
else
  alias mv='mv -i'
fi
if (cp --help 2>&1 | grep '\--progress-bar' > /dev/null 2>&1;); then
  alias cp='cp -ig'
else
  alias cp='cp -i'
fi

# よく間違えるねん
alias cd..='cd ..'

# tmux
alias tmux='tmux -u'
alias tm='tmux'
alias ta='tmux attach'
alias tl='tmux list-sessions'

# ssh
# 問題出るまではこれで誤魔化す
alias ssh='ssh -t'

# git
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gba='git branch -a'
alias gci='git commit'
alias gco='git checkout'
alias gd='git diff --color'
alias gdc='git diff --color --cached'
alias gpl='git pull'
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gst='git stash'
alias gsl='git stash list'
alias gsp='git stash pop'
alias gss='git status -s'
alias gsu='git submodule update --recursive'
alias gm='git merge --no-ff'
alias gcl1='git clone --depth 1'

# du/df
alias du='du -h'
alias df='df -h'
alias duh='du -h ./ --max-depth=1'

# su
alias su='su -l'

# less
alias less='less -iRM'

# (neo)?vim
if which nvim > /dev/null 2>&1; then
  alias vim='nvim'
fi
alias vi='vim'

# extract
alias ex='extract'

# locate
alias loc='locate'

# android emulator
alias emu="${ANDROID_HOME}/tools/emulator"

# docker-compose
alias d='docker-compose'

# gnu ls
if ls --color > /dev/null 2>&1; then
  alias ls='ls --color'
fi

# OS別の設定
case "${OSTYPE}" in
  darwin*)
    # java
    alias javac='javac -J-Dfile.encoding=UTF-8'
    alias java='java -Dfile.encoding=UTF-8'

    # colordiff
    alias diff='colordiff'

    # spotlight locate
    alias locate='mdfind -name'

    # open
    alias o='open'

    # homebrew
    alias brews='brew list -1'
    alias bubo='brew update && brew outdated'
    alias bubc='brew upgrade && brew cleanup'
    alias bubu='bubo && bubc'
    ;;
  linux*)
    ;;
esac
alias fp='realpath -s'

# colors
pcolor() {
  for ((f = 0; f < 255; f++)); do
    printf "\e[38;5;%dm %3d#\e[m" $f $f
    if [[ $f%8 -eq 7 ]] then
      printf "\n"
    fi
  done
  echo
}

# xcolor (カラーコードの削除)
alias xcolor='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"'

# tmux-ssh
function ssh() {
  if [[ -n $(printenv TMUX) ]]; then
    local window_name=$(tmux display -p '#{window_name}')
    tmux rename-window -- "$@[-1]" # zsh specified
    # tmux rename-window -- "${!#}" # for bash
    command ssh $@
    tmux rename-window $window_name
  else
    command ssh $@
  fi
}

# tmux-sync
function tmux-sync() {
  if [[ -n $(printenv TMUX) ]]; then
    if (tmux show-options -w | grep -q 'synchronize-panes on'); then
      MODE="off"
    else
      MODE="on"
    fi
    tmux set-window-option synchronize-panes ${MODE}
    echo "synchronize-panes ${MODE}"
  fi
}
alias ts='tmux-sync'

# ag
alias ag='ag --pager="less -iRM"'
function vag () {
  vi -c "Ack \"$1\"";
}

# git checkout
function gcof() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf-tmux +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# tree
alias tree='tree -N'

# jq
alias jq='jq -C'

# php codestyle fixer
function pfix() {
  php-cs-fixer fix $1
  phpcbf --standard=PSR2 $1
}

# location and copy
function xcp() {
  xargs -d '\n' -I{} cp {} $1
}

# check certificate
function check_cert() {
  IPADDR=$1
  DOMAIN=$2
  if [ ! $DOMAIN ]; then
    DOMAIN=$IPADDR
  fi
  openssl s_client -connect $IPADDR:443 -servername $DOMAIN < /dev/null 2>&1 | openssl x509 -text | egrep '(Not (Before|After)|Subject:|DNS)'
}

function hash_cert() {
  CERT_FILE=$1
  openssl x509 -in "$CERT_FILE" -pubkey -noout -outform pem | sha256sum
}

function hash_pem() {
  PEM_FILE=$1
  openssl pkey -in "$PEM_FILE" -pubout -outform pem | sha256sum
}

function hash_csr() {
  CSR_FILE=$1
  openssl req -in "$CSR_FILE" -pubkey -noout -outform pem | sha256sum
}

# update dotfile
function gitignore-update() {
  if which gibo > /dev/null 2>&1; then
    gibo update
    gibo dump Dropbox Eclipse Emacs Linux macOS Vim VirtualEnv Xcode VisualStudioCode Windows > ~/dotfiles/_git/gitignore
    cat ~/dotfiles/_git/my.gitignore >> ~/dotfiles/_git/gitignore
  fi
}
function dot-update() {
  OLD_DIR=`pwd`

  cd ~/dotfiles && git pull
  sheldon lock --update
  vi \
    -c PlugUpgrade \
    -c PlugClean! \
    -c PlugUpdate \
    -c UpdateRemotePlugins \
    -c CocUpdate \
    -c TSUpdate \
    -c quitall
  if which pip3 > /dev/null 2>&1; then
    dependencies=(
      pip poetry
      # neovim
      pynvim neovim
      # powerline
      psutil
      # coc-pyright
      rope ruff
      # coc-ruff
      ruff-lsp
      # coc-docstring
      doq
    )
    pip3 list -o --format=json | jq -r '.[].name' | xargs pip3 install -U "${dependencies[@]}"
  fi
  if [ ${EUID:-${UID}} != 0 ]; then
    npm -g update
  fi

  cd "$OLD_DIR"
}

function prompt() {
  PROMPT='$ '
  PROMPT2=''
  SPROMPT=''
  RPROMPT=''
}
